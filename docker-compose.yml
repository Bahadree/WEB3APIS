version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: web3apis-postgres
    environment:
      POSTGRES_DB: web3apis
      POSTGRES_USER: web3apis
      POSTGRES_PASSWORD: web3apis123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U web3apis -d web3apis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    container_name: web3apis-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: web3apis-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://web3apis:web3apis123@postgres:5432/web3apis
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-change-in-production
      FRONTEND_URL: http://localhost:3000 # Local geliştirme için
      # Railway deployunda: FRONTEND_URL=https://web3apis.up.railway.app
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"] # Local geliştirme için
      # Railway deployunda: "CMD", "curl", "-f", "https://web3apis-backend.up.railway.app/api/health"
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web3apis-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api # Local geliştirme için
      # Railway deployunda .env veya Railway panelinden şu şekilde ayarlayın:
      # NEXT_PUBLIC_API_URL=https://web3apis-backend.up.railway.app/api
      NEXT_PUBLIC_APP_URL: http://localhost:3000 # Local geliştirme için
      # Railway deployunda: NEXT_PUBLIC_APP_URL=https://web3apis.up.railway.app
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
